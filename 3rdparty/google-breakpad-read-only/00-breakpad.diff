Index: src/client/mac/handler/minidump_generator.cc
===================================================================
--- src/client/mac/handler/minidump_generator.cc	(revision 318)
+++ src/client/mac/handler/minidump_generator.cc	(working copy)
@@ -320,10 +320,10 @@
                                    MDMemoryDescriptor *stack_location) {
   breakpad_thread_state_t *machine_state =
     reinterpret_cast<breakpad_thread_state_t *>(state);
-#if TARGET_CPU_PPC
+#if __DARWIN_UNIX03
+  mach_vm_address_t start_addr = machine_state->__r1;
+#else
   mach_vm_address_t start_addr = machine_state->r1;
-#else
-  mach_vm_address_t start_addr = machine_state->__r1;
 #endif
   return WriteStackFromStartAddress(start_addr, stack_location);
 }
@@ -333,10 +333,10 @@
   breakpad_thread_state_t *machine_state =
     reinterpret_cast<breakpad_thread_state_t *>(state);
 
-#if TARGET_CPU_PPC
+#if __DARWIN_UNIX03
+  return machine_state->__srr0;
+#else
   return machine_state->srr0;
-#else
-  return machine_state->__srr0;
 #endif
 }
 
@@ -353,7 +353,7 @@
   MinidumpContext *context_ptr = context.get();
   context_ptr->context_flags = MD_CONTEXT_PPC_BASE;
 
-#if TARGET_CPU_PPC64
+#if __DARWIN_UNIX03
 #define AddReg(a) context_ptr->a = machine_state->__ ## a
 #define AddGPR(a) context_ptr->gpr[a] = machine_state->__r ## a
 #else
@@ -420,8 +420,12 @@
 #if TARGET_CPU_X86_64
   mach_vm_address_t start_addr = machine_state->__rsp;
 #else
+#if __DARWIN_UNIX03
+  mach_vm_address_t start_addr = machine_state->__esp;
+#else
   mach_vm_address_t start_addr = machine_state->esp;
 #endif
+#endif
   return WriteStackFromStartAddress(start_addr, stack_location);
 }
 
@@ -433,8 +437,12 @@
 #if TARGET_CPU_X86_64
   return machine_state->__rip;
 #else
-  return machine_state->eip;
+#if __DARWIN_UNIX03
+	return machine_state->__eip;
+#else
+	return machine_state->eip;
 #endif
+#endif
 }
 
 bool MinidumpGenerator::WriteContext(breakpad_thread_state_data_t state,
@@ -452,7 +460,11 @@
 #if TARGET_CPU_X86
   context_ptr->context_flags = MD_CONTEXT_X86;
 
-#define AddReg(a) context_ptr->a = machine_state->a
+#if __DARWIN_UNIX03
+	#define AddReg(a) context_ptr->a = machine_state->__##a
+#else
+	#define AddReg(a) context_ptr->a = machine_state->a
+#endif
   AddReg(eax);
   AddReg(ebx);
   AddReg(ecx);
Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revision 0)
+++ CMakeLists.txt	(revision 0)
@@ -0,0 +1,74 @@
+project(breakpad-client)
+CMAKE_MINIMUM_REQUIRED(VERSION 2.6.0 FATAL_ERROR)
+
+set(CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE ON)
+set(CMAKE_INCLUDE_CURRENT_DIR ON)
+
+message(STATUS ${CMAKE_SYSTEM_PROCESSOR})
+
+#ADD_DEFINITIONS(-DTARGET_CPU_X86)
+
+INCLUDE_DIRECTORIES(
+	src/
+)
+
+set(SOURCES )
+
+if (UNIX) 
+	ADD_DEFINITIONS(-Wall)
+	set(SOURCES ${SOURCES}
+		src/client/minidump_file_writer.cc
+		src/common/convert_UTF.c
+		src/common/string_conversion.cc
+	)
+endif(UNIX)
+
+
+if (WIN32) 
+	SET(SOURCES  ${SOURCES}
+		src/common/guid_string.cc
+		src/client/windows/exception_handler.cc
+	   )
+endif (WIN32)
+
+if (UNIX)
+	if (APPLE) 
+	 
+                INCLUDE_DIRECTORIES(/Developer/Headers/FlatCarbon)
+
+		FIND_LIBRARY(COCOA_LIBRARY COCOA)
+		MARK_AS_ADVANCED(COCOA_LIBRARY)
+		SET(EXTRA_LIBS crypto ${COCOA_LIBRARY})
+
+		SET(SOURCES  ${SOURCES}
+			src/client/mac/handler/breakpad_nlist_64.cc
+			src/client/mac/handler/dynamic_images.cc
+			src/client/mac/handler/exception_handler.cc
+			src/client/mac/handler/minidump_generator.cc
+			src/client/mac/handler/protected_memory_allocator.cc
+			src/common/mac/dump_syms.mm
+			src/common/mac/dwarf/bytereader.cc
+			src/common/mac/dwarf/dwarf2reader.cc
+			src/common/mac/dwarf/functioninfo.cc
+			src/common/mac/file_id.cc
+			src/common/mac/macho_id.cc
+			src/common/mac/macho_utilities.cc
+			src/common/mac/macho_walker.cc
+			src/common/mac/string_utilities.cc
+		)
+	else (APPLE)
+		SET(SOURCES  ${SOURCES}
+			src/client/linux/handler/exception_handler.cc
+			src/client/linux/handler/linux_thread.cc
+			src/client/linux/handler/minidump_generator.cc
+			src/common/linux/dump_symbols.cc
+			src/common/linux/file_id.cc
+			src/common/linux/guid_creator.cc
+			src/common/linux/http_upload.cc
+			src/common/md5.c
+		   )
+	endif (APPLE)
+endif (UNIX)
+
+add_library(breakpad SHARED ${SOURCES})
+target_link_libraries(breakpad ${EXTRA_LIBS}) 
